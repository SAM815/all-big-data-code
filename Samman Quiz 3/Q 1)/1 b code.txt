import org.apache.spark.sql.SparkSession
import org.apache.spark.ml.feature.{StringIndexer, VectorAssembler}
import org.apache.spark.ml.classification.LinearSVC
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator


val session = SparkSession.builder().appName("SVMDefaultPrediction").getOrCreate()


val rawDataFrame = session.read.format("csv")
  .option("header", "true")  
  .option("sep", ";")  
  .option("inferSchema", "true")  
  .load("input/datafile.txt")  


val defaultIndexer = new StringIndexer()
  .setInputCol("default")
  .setOutputCol("target")

val labelledDataFrame = defaultIndexer.fit(rawDataFrame).transform(rawDataFrame)


val employmentIndexer = new StringIndexer()
  .setInputCol("job")
  .setOutputCol("employmentIndex")

val maritalStatusIndexer = new StringIndexer()
  .setInputCol("marital")
  .setOutputCol("maritalStatusIndex")

val educationLevelIndexer = new StringIndexer()
  .setInputCol("education")
  .setOutputCol("educationLevelIndex")


val employmentTransformed = employmentIndexer.fit(labelledDataFrame).transform(labelledDataFrame)
val maritalTransformed = maritalStatusIndexer.fit(employmentTransformed).transform(employmentTransformed)
val fullyTransformedData = educationLevelIndexer.fit(maritalTransformed).transform(maritalTransformed)


val featureAssembler = new VectorAssembler()
  .setInputCols(Array("age", "employmentIndex", "maritalStatusIndex", "educationLevelIndex"))
  .setOutputCol("featureVector")

val featureData = featureAssembler.transform(fullyTransformedData)


val Array(trainingSet, testSet) = featureData.randomSplit(Array(0.7, 0.3))


val supportVectorMachine = new LinearSVC()
  .setMaxIter(10)
  .setRegParam(0.1)
  .setFeaturesCol("feature
